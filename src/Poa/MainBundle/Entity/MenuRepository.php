<?php

	namespace Poa\MainBundle\Entity;

	use Doctrine\ORM\EntityRepository;

	/**
	 * PageRepository
	 *
	 * This class was generated by the Doctrine ORM. Add your own custom
	 * repository methods below.
	 */
	class MenuRepository extends EntityRepository
	{
		public function getMenuID($id) {
			$pages = $this->createQueryBuilder('m')
				->andWhere('m.menu_order = ?1')
				->andWhere('m.menu_active = ?2')
				->andWhere('m.menu_depth = 0')
				->addOrderBy('m.menu_order')
				->setParameter(1, $id)
				->setParameter(2, true)
				->getQuery()->getResult();
			return $pages;
		}

		public function getMenuForParent($parent_id) {
// TODO: Change to the following query:
// select *, COALESCE(C.count_children,0) from poa_menu A left join (select parent, count(id) as count_children from poa_menu group by parent) C on C.parent = A.id
			$pages = $this->createQueryBuilder('n')
				->andWhere('n.menu_active = ?1')
				->andWhere('n.parent = ?2')
				->addOrderBy('n.menu_order')
				->setParameter(1, true)
				->setParameter(2, $parent_id)
				->getQuery()->getResult();
			return $pages;
//			$pages = $this->createQueryBuilder('n')
//				->leftJoin('SELECT c.parent, COALESC(COUNT(C.id),0) AS child_recs FROM Menu c GROUP BY c.parent')
//				->andWhere('n.menu_active = ?1')
//				->andWhere('n.parent = ?2')
//				->addOrderBy('n.menu_order')
//				->setParameter(1, true)
//				->setParameter(2, $parent_id)
//				->getQuery()->getResult();
//			return $pages;
		}

		public function getMenusByDepth($depth) {
			$pages = $this->createQueryBuilder('n')
				->andWhere('n.menu_active = ?1')
				->andWhere('n.menu_depth = ?2')
				->addOrderBy('n.menu_order')
				->setParameter(1, true)
				->setParameter(2, $depth)
				->getQuery()->getResult();
			return $pages;
		}

		public function getBreadcrumb($page) {
			$ancestor = ($page->getMenuDepth() != 0) ? $page->getParent() : null;

			if($this->isHome($page)) {
				$bc = array(
					array(
						'name' => 'Home',
						'slug' => 'home',
						'is_last' => true,
					)
				);
			} elseif (!$ancestor) {
				$bc = array(
					array(
						'name' => 'Home',
						'slug' => 'home',
						'is_last' => false,
					),
					array(
						'name' => $page->getName(),
						'slug' => $page->getSlug(),
						'is_last' => true,
					),
				);
			} elseif($ancestor) {
				$ancestor = $this->find($ancestor);
				$bc = array(
					array(
						'name' => 'Home',
						'slug' => 'home',
						'is_last' => false,
					),
					array(
						'name' => $ancestor->getName(),
						'slug' => $ancestor->getSlug(),
						'is_last' => false,
					),
					array(
						'name' => $page->getName(),
						'slug' => $page->getSlug(),
						'is_last' => true,
					),
				);
			}
			return $bc;
		}

		public function isHome($page) {
			return ($page->getSlug() == 'home') ? true : false;
		}
	}