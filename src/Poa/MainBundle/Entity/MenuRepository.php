<?php

	namespace Poa\MainBundle\Entity;

	use Doctrine\ORM\EntityRepository;

	/**
	 * PageRepository
	 *
	 * This class was generated by the Doctrine ORM. Add your own custom
	 * repository methods below.
	 */
	class MenuRepository extends EntityRepository
	{
		public function getNavMenu($name) {
			$nav = array();

			$menu_id = $this->getMainMenuID($name);
			$menus = $this->getMenuForParent($menu_id);

			foreach ($menus as $menu) {

				$children = array();
				$childPages = $this->getMenuForParent($menu->getId());
				foreach($childPages as $c) {
					$children[] = array(
						'id'    => $c->getId(),
						'name'  => $c->getName(),
						'route' => $c->getSlug()
					);
				}
				$nav[] = array(
					'id'       => $menu->getId(),
					'name'     => $menu->getName(),
					'slug'     => $menu->getSlug(),
					'children' => $children
				);
			}

			return $nav;
		}

		public function getMainMenuID($name) {
			$pages = $this->createQueryBuilder('n')
				->andWhere('n.menu_active = ?1')
				->andWhere('n.menu_depth = ?2')
				->andWhere('n.menu_order = ?3')
				->andWhere('n.name = ?4')
				->addOrderBy('n.menu_order')
				->setParameter(1, true)
				->setParameter(2, 0)
				->setParameter(3, 0)
				->setParameter(4, $name)
				->getQuery()->getResult();
			return $pages;
		}

		public function getMenuForParent($parent_id) {
			$pages = $this->createQueryBuilder('n')
				->andWhere('n.menu_active = ?1')
				->andWhere('n.parent = ?2')
				->addOrderBy('n.menu_order')
				->setParameter(1, true)
				->setParameter(2, $parent_id)
				->getQuery()->getResult();
			return $pages;
//			$pages = $this->getDoctrine()
//				->getManager()
//				->createQuery('SELECT n FROM Menu n WHERE n.menu_active = ?1 AND n.parent = ?2 ORDER BY n.menu_order')
//				->setParameter(1, true)
//				->setParameter(2, $parent_id)
//				->getResult();
//			return $pages;
		}

		public function getMenusByDepth($depth) {
			$pages = $this->createQueryBuilder('n')
				->andWhere('n.menu_active = ?1')
				->andWhere('n.menu_depth = ?2')
				->addOrderBy('n.menu_order')
				->setParameter(1, true)
				->setParameter(2, $depth)
				->getQuery()->getResult();
			return $pages;
		}

		public function getBreadcrumb($page) {
			$ancestor = ($page->getMenuDepth() != 0) ? $page->getParent() : null;

			if($this->isHome($page)) {
				$bc = array(
					array(
						'name' => 'Home',
						'slug' => 'home',
						'is_last' => true,
					)
				);
			} elseif (!$ancestor) {
				$bc = array(
					array(
						'name' => 'Home',
						'slug' => 'home',
						'is_last' => false,
					),
					array(
						'name' => $page->getName(),
						'slug' => $page->getSlug(),
						'is_last' => true,
					),
				);
			} elseif($ancestor) {
				$ancestor = $this->find($ancestor);
				$bc = array(
					array(
						'name' => 'Home',
						'slug' => 'home',
						'is_last' => false,
					),
					array(
						'name' => $ancestor->getName(),
						'slug' => $ancestor->getSlug(),
						'is_last' => false,
					),
					array(
						'name' => $page->getName(),
						'slug' => $page->getSlug(),
						'is_last' => true,
					),
				);
			}
			return $bc;
		}

		public function isHome($page) {
			return ($page->getSlug() == 'home') ? true : false;
		}
	}